import { sentenceCase, camelCase } from "change-case";
import * as fs from "fs";
import { generateRuntypes } from "generate-runtypes";
import { EOL } from "os";
import { Endpoint, EndpointKey } from "../../lexer/types";
import * as rt from "runtypes";
const httpMethodRuntype = rt.Literal("GET");

const ENDPOINT_SUFFIX = "Endpoint";
const RUNTYPE_SUFFIX = "DTO";

type EndpointName = `${string}${typeof ENDPOINT_SUFFIX}`;
type RuntypeName = `${string}${typeof RUNTYPE_SUFFIX}`;

function convertToDTOName(str: EndpointKey): {
  endpointName: EndpointName;
  runtypeName: RuntypeName;
} {
  const [httpMethod, endpoint] = str.split(" ");
  const safeHttpMethod = httpMethodRuntype.check(httpMethod);
  const endpointParts = endpoint.split("/");
  const dtoName = endpointParts[1];
  return {
    runtypeName: `${camelCase(safeHttpMethod)}${sentenceCase(dtoName)}DTO`,
    endpointName: `${camelCase(safeHttpMethod)}${sentenceCase(
      dtoName
    )}Endpoint`,
  };
}

export const generateStrings = (endpoints: Endpoint[]): string[] => {
  const lines: string[] = [];
  const endpointNames: string[] = [];
  lines.push("/* eslint @typescript-eslint/no-unused-vars: 0 */");
  lines.push(EOL);
  lines.push(EOL);
  lines.push(`//AUTOGENERATED FILE - DO NOT EDIT MANUALLY`);
  lines.push(EOL);
  lines.push(EOL);
  lines.push(EOL);

  endpoints.forEach((endpoint) => {
    Object.keys(endpoint).map((endpointKey: EndpointKey) => {
      const responseBody = endpoint[endpointKey].responseBody;
      const { endpointName: constantName, runtypeName } =
        convertToDTOName(endpointKey);
      const sourceCode = generateRuntypes([responseBody]);
      lines.push(EOL);
      lines.push(sourceCode);
      lines.push(`const ${constantName} = {
      "${endpointKey}": { 
        responseBody: ${runtypeName}}
      }`);
      //push a new line to string array
      lines.push(EOL);
      lines.push(EOL);
      endpointNames.push(constantName);
    });
  });
  lines.push(EOL);

  lines.push(EOL);

  lines.push(`export const endpointRegistry = {`);
  lines.push(`...${endpointNames.join(", ")}`);
  lines.push(`} as const;`);

  return lines;
};

export const writeStringstoAFile = (strings: string[]) => {
  const file = fs.createWriteStream("src/out/typescriptTypes.ts");
  file.on("error", (err) => {
    console.log(err);
  });
  strings.forEach((str) => {
    file.write(str);
  });
  file.end();
};
