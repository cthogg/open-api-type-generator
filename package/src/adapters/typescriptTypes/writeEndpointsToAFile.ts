import { sentenceCase } from "change-case";
import * as fs from "fs";
import { generateRuntypes } from "generate-runtypes";
import { EOL } from "os";
import { Endpoint } from "../../lexer/types";

function convertToDTOName(str: string): string {
  const [httpMethod, endpoint] = str.split(" ");
  const endpointParts = endpoint.split("/");
  const dtoName = endpointParts[1];
  return `${sentenceCase(httpMethod)}${sentenceCase(dtoName)}DTO`;
}

export const generateStrings = (endpoints: Endpoint[]): string[] => {
  const stringArray: string[] = [];
  const exportNames: string[] = [];
  stringArray.push(`//AUTOGENERATED FILE - DO NOT EDIT MANUALLY`);
  stringArray.push(EOL);
  stringArray.push(EOL);

  endpoints.forEach((_endpoint, i) => {
    console.log("_endpoint", _endpoint);
    Object.keys(_endpoint).map((endpoint) => {
      const identifier = endpoint;

      const name = convertToDTOName(identifier);
      //FIXME: need to find a way to generate this from runtypes
      const sourceCode = generateRuntypes([
        {
          name,
          type: {
            kind: "record",
            fields: [
              { name: "artist_name", type: { kind: "string" } },
              { name: "artist_genre", type: { kind: "string" } },
              { name: "albums_recorded", type: { kind: "number" } },
              { name: "username", type: { kind: "string" } },
            ],
          },
        },
      ]);
      stringArray.push(sourceCode);
      // const { node } = zodToTs(_endpoint[endpoint].responseBody, name);
      // const typeAlias = createTypeAlias(node, name, endpoint);
      // stringArray.push(printNode(typeAlias));
      //push a new line to string array
      stringArray.push(EOL);
      stringArray.push(EOL);
      exportNames.push(name);
    });
  });
  stringArray.push(`export {${exportNames.join(", ")}}`);
  return stringArray;
};

export const writeStringstoAFile = (strings: string[]) => {
  const file = fs.createWriteStream("src/out/typescriptTypes.ts");
  file.on("error", (err) => {
    console.log(err);
  });
  strings.forEach((str) => {
    file.write(str);
  });
  file.end();
};
